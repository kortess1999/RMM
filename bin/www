#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rmm:server');
var http = require('http');
const moment = require('moment');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
//Данные по модулям
var Tmodules={};
//Обработка полученных данных
const io = require('socket.io')(server);
io.on('connection', (client) => {
  console.log(`Connected!: ${Object.keys(client)}`);
  client.on('login_data',(data)=>{
    console.log(`Получили данные логина:${JSON.stringify(data)}`);
    client.login=data.login;
    client.password=data.password;
    Tmodules[client.login]={
      module:client,
      login:data.login,
      password:data.password,
      lastContact:moment(),
      state:{},
      functions:{
        relogin(){
          this.module.emit('relogin');
        },
        checkState(){
          this.module.emit('checkState');
        },
        restart(){
          this.module.emit('restart');
        }
      }
    };
  });
  client.on('common_data',(data)=>{
    if(typeof client.login=="undefined")
    {
      client.emit('relogin');
      return
    }
    //Изменение состояния
    Tmodules[client.login].lastContact=moment();
    Tmodules[client.login].state.temperature=data.temperature;
    Tmodules[client.login].state.BelowWaterLevel=data.BelowWaterLevel;
    Tmodules[client.login].state.UpperWaterLevel=data.UpperWaterLevel;
    //Здесь добавить запрос на добавление в БД
    console.log(`Получили данные:${JSON.stringify(data)}`);
  });
  client.on('payment_data',(data)=>{
    console.log(`Получили данные:${JSON.stringify(data)}`);
  });

});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
